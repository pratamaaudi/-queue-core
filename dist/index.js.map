{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":";AAAA,IAAM,QAAN,MAAY;AAAA,EAMH,YAAY;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAKG;AAfH,SAAU,eAAmC,YAAY;AAAA,IAAC;AAC1D,SAAU,eAA4C,YAAY;AAAA,IAAC;AACnE,SAAU,mBAAgD,YAAY;AAAA,IAAC;AACvE,SAAU,QAAgB;AAoB1B,wBAAoC,MAClC,IAAI,QAAQ,CAAC,MAAM,WAAW,GAAG,KAAK,KAAK,CAAC;AAR5C,SAAK,eAAe;AACpB,SAAK,eAAe;AACpB,SAAK,mBAAmB;AAExB,QAAI;AAAO,WAAK,QAAQ;AAAA,EAC1B;AAAA,EAKA,MAAM,QAAQ;AACZ,WAAO,MAAM;AACX,YAAM,OAAO,MAAM,KAAK,aAAa;AAErC,UAAI,MAAM;AACR,cAAM,KAAK,aAAa,IAAI;AAE5B,cAAM,KAAK,iBAAiB,IAAI;AAEhC,cAAM,KAAK,aAAa;AAExB;AAAA,MACF;AAEA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,cAAQ,EAAE,MAAM","sourcesContent":["class Queue {\n  protected nextDataFunc: () => Promise<any> = async () => {};\n  protected procDataFunc: (data: any) => Promise<any> = async () => {};\n  protected postProcDataFunc: (data: any) => Promise<any> = async () => {};\n  protected delay: number = 1000;\n\n  public constructor({\n    getNextData,\n    process,\n    postProcess,\n    delay,\n  }: {\n    getNextData: () => Promise<any>;\n    process: (data: any) => Promise<any>;\n    postProcess: (data: any) => Promise<any>;\n    delay: number | null | undefined;\n  }) {\n    this.nextDataFunc = getNextData;\n    this.procDataFunc = process;\n    this.postProcDataFunc = postProcess;\n\n    if (delay) this.delay = delay;\n  }\n\n  sleepAsDelay: () => Promise<void> = () =>\n    new Promise((r) => setTimeout(r, this.delay));\n\n  async start() {\n    while (true) {\n      const data = await this.nextDataFunc();\n\n      if (data) {\n        await this.procDataFunc(data);\n\n        await this.postProcDataFunc(data);\n\n        await this.sleepAsDelay();\n\n        continue;\n      }\n\n      break;\n    }\n  }\n}\n\nexport default { Queue };\n"]}